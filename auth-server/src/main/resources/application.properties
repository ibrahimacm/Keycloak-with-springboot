server.port = 9000

#spring.security.oauth2.client.registration.oauth2-client-credentials.client-id=auth-client
#spring.security.oauth2.client.registration.oauth2-client-credentials.client-secret=${CLIENT_SECRET}
#spring.security.oauth2.client.registration.oauth2-client-credentials.scope=openid, profile, roles
#spring.security.oauth2.client.registration.oauth2-client-credentials.authorization-grant-type=password
#spring.security.oauth2.client.registration.oauth2-client-credentials.redirect-uri=${REDIRECT_URI:http://localhost:8080/login/oauth2/code/oauth2-client-credentials}
#spring.security.oauth2.client.registration.oauth2-client-credentials.provider=keycloak

#spring.security.oauth2.client.provider.keycloak.issuer-uri=${ISSUER_URI:http://localhost:8180/auth/realms/auth-realm}
#spring.security.oauth2.client.provider.keycloak.token-uri=${TOKEN_URI:http://localhost:8180/auth/realms/auth-realm/protocol/openid-connect/token}

org.apache.jasper.compiler.TldLocationsCache.level = FINE
org.apache.jasper.servlet.TldScanner.level = FINE

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

keycloak.realm=springdemo
keycloak.resource=product-app
keycloak.auth-server-url=${SERVER_URI:http://localhost:8180/auth}
keycloak.ssl-required=external
keycloak.public-client=true	

#keycloak.security-constraints[0].authRoles[0]=user
#keycloak.security-constraints[0].securityCollections[0].patterns[0]=${IBRA:/ping/*}

